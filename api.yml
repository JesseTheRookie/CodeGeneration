openapi: 3.0.0
servers:
  - description: Inholland backend
    url: https://swaggerbank.herokuapp.com/
info:
  version: "1.0"
  title: "Inholland_Bank_API"
  description: "Banking API voor Inholland"

paths:
  /accounts:
    get:
      security:
        - cookieAuth: []
      tags:
        - account
      summary: Returns all accounts
      operationId: getAccounts
      description: Returns a list of all accounts, if the logged in user is an employee
      parameters:
        - name: type
          in: query
          description: The type of accounts that need to be considered to filter
          required: false
          schema:
            type: string
            enum:
              - current
              - savings
      responses:
        "200":
          description: Account(s) found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

    post:
      security:
        - cookieAuth: []
      tags:
        - account
      summary: Creates a new account
      operationId: createAccount
      description: Creates a new account, if the logged in user is an employee
      responses:
        "201":
          description: Account created
          content:
            application/json:
              schema:
                type: string
                description: The iban of the created user
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
        description: Account details
        required: true

  /accounts/{iban}:
    get:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
          description: The iban of the account you want to retrieve
      tags:
        - account
      summary: Returns the specified account
      operationId: getAccountByIban
      description: Returns the account, specified by the iban
      responses:
        "200":
          description: Account found
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

    put:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
          description: The iban
      tags:
        - account
      summary: Toggles the status of the specified account
      operationId: toggleAccountStatus
      description: Toggles the status of the specified account, active or frozen
      responses:
        "200":
          description: Status updated
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

    delete:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
          description: The iban
      tags:
        - account
      summary: Deletes the specified account
      operationId: deleteAccount
      description: Deletes the specified account, if the logged in user is an employee AND the balance of the account is zero
      responses:
        "200":
          description: Account deleted
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /users:
    get:
      security:
        - cookieAuth: []
      tags:
        - user
      summary: Returns all users
      operationId: getUsers
      description: Returns a list of all users
      responses:
        "200":
          description: User(s) found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

    post:
      security:
        - cookieAuth: []
      tags:
        - user
      summary: Creates a new user
      operationId: createUser
      description: Creates a new user, if the logged in user is an employee, and returns the userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: integer
                description: The id of the created user
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /users/{userId}:
    get:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            minimum: 100
          description: The user ID, starts at 100
      tags:
        - user
      summary: Returns specified user
      operationId: getUserById
      description: Returns the specified user
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /users/{userId}/accounts:
    get:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The user Id
      tags:
        - user
      summary: Returns all accounts of the specified user
      operationId: getAccountsByUserId
      description: Returns a list of accounts, belonging to the logged in user
      responses:
        "200":
          description: the account(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /login:
    post:
      tags:
        - login & out
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        description: Username and password
      security: []
      responses:
        "200":
          description: >
            User logged in.
            The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=238C4576E823201BFFDâ€¦C1E; Path=/; Secure; HttpOnly
        "400":
          description: Invalid input, username and/or password is not correct
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /logout:
    get:
      security:
        - cookieAuth: []
      tags:
        - login & out
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation

  /transactions:
    post:
      security:
        - cookieAuth: []
      tags:
        - transaction
      summary: Create a new transaction
      operationId: createTransaction
      description: Creates a transaction of the specified type, ammount and accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: Transaction created
          content:
            application/json:
              schema:
                type: integer
                description: The id of the created transaction
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "500":
          description: Oops, something went wrong on the server. Sorry!
    get:
      security:
        - cookieAuth: []
      tags:
        - transaction
      summary: Get transactions depending on the optional parameters; the abstinence of any parameters results in all transactions.
      operationId: getTransactions
      parameters:
        - name: fromIban
          in: query
          required: false
          schema:
            type: string
          description: The iban of the sending backaccount
        - name: toIban
          in: query
          required: false
          schema:
            type: string
          description: The iban of the receiving backaccount
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [transaction, deposit, withdrawal]
          description: The type of transaction
        - name: performedBy
          in: query
          required: false
          schema:
            type: integer
          description: The id of the user who performed the transaction
      responses:
        "200":
          description: Transaction(s) found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /transactions/{transactionId}:
    get:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: The transaction id
      tags:
        - transaction
      summary: Returns the specified transaction
      operationId: getTransactionById
      description: Returns the specified transaction
      responses:
        "200":
          description: Transaction found
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "500":
          description: Oops, something went wrong on the server. Sorry!

  /transactions/iban/{iban}:
    get:
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
          description: The iban for fromIban AND toIban
      tags:
        - transaction
      summary: Returns all transaction with the specified iban in the fromIban or toIban field
      operationId: getTransactionsByIban
      description: Returns all transaction which involve this iban (from or to)
      responses:
        "200":
          description: Transaction(s) found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have the required rights
        "500":
          description: Oops, something went wrong on the server. Sorry!

components:
  schemas:
    Account:
      type: object
      required:
        - iban
        - name
        - balance
        - type
        - status
      properties:
        iban:
          type: string
          description: The Iban of the account
        user:
          type: object
          items:
            $ref: "#/components/schemas/User"
          description: The user who owns the account
        name:
          type: string
          description: The name of the user
        balance:
          type: number
          description: The ammount of money in the account
        type:
          type: string
          enum: [current, savings]
          description: The type of the account; current or savings
        status:
          type: string
          enum: [active, frozen]
          description: The status of the account; frozen or active
    User:
      type: object
      required:
        - id
        - name
        - password
        - role
      properties:
        id:
          type: integer
          description: The id of the user
        name:
          type: string
          description: The name of the user
        password:
          type: string
          description: The password of the users
        role:
          type: string
          enum: [user, employee, user_employee]
          description: The role the users has; a user, employee or user_employee
    Transaction:
      type: object
      required:
        - id
        - fromIban
        - toIban
        - amount
        - type
        - timeStamp
        - performedBy
      properties:
        id:
          type: integer
        fromIban:
          type: string
          description: the iban of the sending end
        toIban:
          type: string
          description: the iban of the receiving end
        amount:
          type: number
          description: the amount to transfer
        type:
          type: string
          enum: [transaction, deposit, withdrawal]
          description: the type of transaction
        timeStamp:
          type: string
          format: date-time
        performedBy:
          type: integer
          description: userID of the user who creates the transaction

  securitySchemes:
    cookieAuth: # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: JSESSIONID # cookie name
